#!/usr/bin/env python

import os, sys
from urlparse import urlparse, urlunparse
from tempfile import mkstemp

try:
   from requests import get
except:
   sys.stderr.write("import error: python-requests not found\n")
   sys.exit(1)

try:
   from lxml import objectify, etree
except:
   sys.stderr.write("import error: python-lxml not found\n")
   sys.exit(1)

catchup = True
catchup = False

def fetch_url(url):
   try:
      print "get:", url
      response = get(url)
      if response.status_code != 200:
         raise Exception()
      return response.content
   except (KeyboardInterrupt, SystemExit):
      raise
   except:
      raise Exception("failed to download: " + url)

def parse(text,url):
   try:
      return objectify.fromstring(text)
   except (KeyboardInterrupt, SystemExit):
      raise
   except Exception as error:
      raise Exception("failed to parse rss: " + url)

def fetch_feed(url):
   text = fetch_url(url)
   return parse(text,url)

def chdir(directory):
   try:
      exists = os.path.isdir(directory)
      if not exists:
         print "creating:", directory
         os.makedirs(directory)
      print "chdir:", directory
      os.chdir(directory)
      return not exists
   except (KeyboardInterrupt, SystemExit):
      raise
   except OSError as error: 
      if error.errno == os.errno.EEXIST and os.path.isdir(directory):
         pass
      else:
         raise Exception("failed to create/change directory: " + directory)
   except:
      raise Exception("failed to create/change directory: " + directory)

def touch(fname, times=None):
   print "touch:", fname
   with file(fname, 'a'):
      os.utime(fname, times)

def done_file(fname):
   return "." + fname + ".done"

def catchup_file(fname):
   return done_file(fname)

def download_file(fname):
   return fname + ".repodcast_download"

def feed_file():
   return ".repodcast_feed.xml"

def http_download(url,fname):
   tmp = None
   try:
      print "download:", url
      fd, tmp = mkstemp(dir=".", prefix=fname, suffix=".repodget.tmp")
      request = get(url, stream=True)
      for data in request.iter_content(chunk_size=4096): 
         if data:
            os.write(fd,data)
      os.close(fd)
      #
      # Would be better to respect umask, here...
      os.chmod(tmp,0644)
      os.rename(tmp,fname)
      print "done:", fname
   except:
      if tmp and os.path.exists(tmp):
         os.unlink(tmp)
      raise

def handle_enclosue(catchup,enclosure):
   attributes = enclosure.attrib
   if not "url" in attributes:
      sys.stderr.write("enclosure without url!\n")
      return
   #
   url = urlparse(attributes["url"])
   fname = os.path.basename(url.path)
   #
   try:
      #
      if os.path.exists(catchup_file(fname)):
         # print "caught up:", fname
         return
      #
      if os.path.exists(done_file(fname)):
         # print "already done:", fname
         return
      #
      if os.path.exists(download_file(fname)):
         # print "already downloaded:", fname
         return
      #
      if os.path.exists(fname):
         # print "already exists:", fname
         return
      #
      if catchup:
         touch(catchup_file(fname))
         return
      #
      # OK.  Download the file.
      http_download(urlunparse(url),download_file(fname))
      touch(done_file(fname))
      #
   except (KeyboardInterrupt, SystemExit):
      raise
   except:
      raise Exception("failed to download: " + url)

def download_feed(catchup,directory,url,username=None,password=None):
   cwd = os.getcwd()
   errors = 0
   enclosures = None
   try:
      catchup = chdir(directory) or catchup
      feed = fetch_feed(url)
      enclosures = feed.findall('.//channel/item/enclosure')
   except (KeyboardInterrupt, SystemExit):
      raise
   except Exception as error:
      sys.stderr.write("error: " + str(error) + "\n")
      chdir(cwd)
      return 1
   #
   for enclosure in enclosures:
      try:
         handle_enclosue(catchup,enclosure)
      except (KeyboardInterrupt, SystemExit):
         raise
      except:
         sys.stderr.write("error: " + str(error) + "\n")
         errors += 1
   #
   try:
      with open(feed_file(), 'w') as fd:
         fd.write(etree.tostring(feed))
   except (KeyboardInterrupt, SystemExit):
      raise
   except:
      raise Exception("failed to write feed file: " + directory)
   #
   chdir(cwd)
   return errors

def handle_config(conf):
   lines = None
   errors = 0
   #
   print "config:", conf
   try:
      with open(conf) as fd:
         lines = fd.readlines()
   except:
      sys.stderr.write("error: failed to read " + conf + "\n")
      sys.exit(1)
   #
   lines = [ line.strip() for line in lines ]
   lines = [ line for line in lines if len(line) ]
   lines = [ line for line in lines if not line.startswith("#") ]
   lines = [ line.split() for line in lines ]
   #
   try:
      for line in lines:
         if line[0] == "root":
            if len(line) == 2:
               root = line[1]
               if not os.path.isabs(root):
                  raise Exception("config: root must be absolute path: " + str(line))
               chdir(root)
            else:
               raise Exception("config: invalid root: " + str(line))
         else:
            if 4 < len(line):
               raise Exception("config: invalid feed (too many tokens): " + str(line))
            #
            line.extend([None,None,None])
            line = line[:4]
            url, directory, username, password = line
            if not directory:
               raise Exception("config: invalid feed (no directory): " + str(line))
            #
            errors += download_feed(catchup,directory,url,username,password)
            #
   except Exception as error:
      sys.stderr.write("error: " + str(error) + "\n")
      sys.exit(1)
   #
   return errors

def choose_config():
   configs = [ "./repodcast.conf", "~/.repodcast.conf", "/etc/repodcast.conf" ]
   for config in configs:
      config = os.path.expanduser(config)
      if os.path.isfile(config) and os.access(config, os.R_OK):
         return config
   raise Exception("could not find config file: " + str(configs))

if __name__ == "__main__":
   errors = 0
   choose_config()
   errors += handle_config(choose_config())
   #
   if 0 < errors:
      sys.stderr.write("feed errors: " + str(errors) + "\n")
   sys.exit(0 if errors == 0 else 1)

