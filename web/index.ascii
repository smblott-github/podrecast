= PodRecast =
Stephen Blott <smblott+prc@gmail.com>
:toc2:

_PodRecast_ is a podcast aggregator for post-processing then
re-publishing podcasts.

// /////////////////////////////////////////////////////
== Download/Installation ==

.Currently:
****
- you need to clone the https://github.com/smblott-github/podrecast[git
  repository], and install from there. +
  There are instructions below.
****

// /////////////////////////////////////////////////////
== Why? ==

****
For me, two reasons:

- Podcast loudness can vary greatly across feeds.  Some can be too
  loud, some too quiet.  And I don't want to fiddle with the
  volume for each new podcast. +
  Post-processing with utilities such as
  http://mp3gain.sourceforge.net/[MP3Gain] can be used to make all podcasts sound equally loud, eliminating the need to fiddle with the volume.

- In the EU, there are rules governing the maximum power output which consumer
  devices, such as smart phones, can generate through headphones.  In a noisy
  environment (for me, that's when cycling) the mandated maximum output
  level can be too low, particularly for spoken podcasts. +
  Again, http://mp3gain.sourceforge.net/[MP3Gain] can be used to
  pre-boost the gain such that podcasts can be listened to comfortably in
  both quiet and noisy environments.

_PodRecast_ enables such post processing by downloading podcasts to a local
system, then republishing them.
****

// /////////////////////////////////////////////////////
== What? ==

.Key idea:
****
- republish podcasts, keeping the rss/xml exactly as it was, except replacing
  enclosure URLs with URLs referencing local, post-processed files.

By keeping the rss/xml exactly as it originally was, metadata such as the
title, the publication date, the GUID and any associated imagery remain
embedded in the feed.
****

.The workflow is as follows:
****
- Download feeds and new podcasts to local storage, typically via a cron job. +
  _PodRecast_ does this.

- Post-process podcasts. +
  _PodRecast_ does not do this, although there is a suitable MP3Gain
  post-processing script in the repository.

- _PodRecast_, serving now as a CGI script, then publishes *exactly* the original feed's
  rss/XML, but with each enclosure's URL replaced with a local URL referencing
  a local, post-processed file. +
  _PodRecast_ does this.
****

// /////////////////////////////////////////////////////
== How? ==

=== Clone the Repository

****
All installation has to be done manually, for now:

[source, sh]
----
git clone https://github.com/smblott-github/podrecast.git
----

_Do not_ use the `Makefile` in the repository blindly, it might not do what
you want.
****

=== Install the Executable

****
Install `podrecast` in some suitable location, possibly `/usr/local/bin`:

[source, sh]
----
install -v -m 0555 podrecast /usr/local/bin/
----
****

=== Configuration

****
Create a configuration file, either in `/usr/local/etc/podrecast.conf` or in `/etc/podrecast.conf`.

Here is an example. +
A commented version of this sample is included in the `sample` directory in the git repository.

.`/etc/podrecast.conf`:
[source, changelog]
----
root /home/blott/tmp/podrecast

Cycling/Velo-Cast        http://velocastcc.squarespace.com/race-radio/rss.xml
BBC/More-Or-Less         http://downloads.bbc.co.uk/podcasts/radio4/moreorless/rss.xml
BBC/Life-Scientific      http://downloads.bbc.co.uk/podcasts/radio4/tls/rss.xml
Economics/Freakonomics   http://feeds.feedburner.com/freakonomicsradio?format=xml
----

The root is the directory under which feeds and podcasts will be stored.
This must come first.

The feed lines each name first a subdirectory for the feed and then the
feed's URL.  Feeds cannot share subdirectories.

This configuration file needs to be in a system-wide location so that
`podrecast` can find it when running as a CGI script.
****

=== Download Podcasts

****
[source, sh]
----
podrecast        # download all available podcasts
# or
podrecast -a     # automatically catchup on newly-added feeds
# or
podrecast -m 2   # download at most 2 podcasts from each feed
----
****

=== Post Processing

****
When podcasts are downloaded, they are not immediately available for
delivery.  First, they must be post processed.

Here is an example.  A longer version of this script is in the
`script` directory of the git repository.

[source, sh]
.podrecast_mp3gain:
----
#!/bin/sh

gain=6

for file in `podrecast --downloaded`
do
   nice nice mp3gain -r -c -p -t -m $gain $file \
      && podrecast --ready $file
done
----

Or, if you don't want to do any post processing, then it can be as simple
as:

[source, sh]
.podrecast_simple:
----
#!/bin/sh

podrecast --ready `podrecast --downloaded`
----
****

=== Republish

****
Install `podrecast` in the CGI directory of your web server.  For me,
that's `/usr/lib/cgi-bin/`:

[source, sh]
----
install -v -m 0555 podrecast /usr/lib/cgi-bin/
----

The URL for your republished feed is:

- `http://SERVER/CGI-BIN/SUBDIRECTORY`

For example, in my own case it's:

- `http://192.168.3.3/cgi-bin/podrecast/Cycling/Velo-Cast`
****

=== Set up `cron`

****
My own `crontab` reads like:

[source, changelog]
----
# download podcasts
05 2,12,17,20,23 * * * chronic podrecast -a

# post processing
55 2,12,17,20,23 * * * chronic podrecast_mp3gain
----

(`chronic` is part of the https://joeyh.name/code/moreutils/[moreutils]
package.  There's an explanation of the what and why or `chronic`
http://www.ubuntujourneyman.com/2011/07/02/chronic-and-cron/[here].)
****

// /////////////////////////////////////////////////////
== Options ==

.Downloading options:
****
`-m MAX` | `--max=MAX`::
   The maximum number of podcasts to download, per feed.  The default is
   `0`, meaning download all available podcasts.
`-c` | `--catchup`::
   Catch up.  Mark all podcasts are downloaded, but do not actually download them.
`-a` | `--autocatchup`::
   Auto catch up.  Whenever (and only when) _PodRecast_ encounters
   a newly-configured feed, it marks all content as downloaded, but does
   not actually download them. +
   The idea is that newly-configured feeds may contain tens or even hundreds of
   podcasts, far more than most people actually want to download.
****

.Post-processing options:
****
`-d` | `--downloaded`::
   Output a list of files which have been downloaded and are ready for
   post processing.
`-r` | `--ready` `[FILES...]`::
   Register these previously-downloaded files as now post processed, and
   ready for delivery as podcasts.
****

// /////////////////////////////////////////////////////
== Final Comments ==

.Authentication:
****
`podrecast` uses `wget` for all downloads.  For authenticated feeds, create
a suitable `.netrc` entry. +
`wget` consults `.netrc` for usernames and passwords.
****

.Locking.
****
`podrecast` locks (with `flock`) its configuration file to prevent two instances running
at the same time (although that probably wouldn't be too much of a problem,
see below...)
****

.File names.
****
`podrecast` handles all downloads via temporary files (c.f. `mkstemp`).  Therefore, you
should not encounter partial downloads with normal-looking file names.
****

.Removing files.
****
`podrecast` _does not_ delete downloaded files.  Just use cron and
`find` for that:

[source, sh]
----
find /MY/ROOT/DIRECTORY -type f -name '[^.]*' -mtime +20 -delete
----


`podrecast` stores its state in hidden files in the podcast directory
itself.  Whenever it downloads a feed, it touches all of the state files
related to enclosures mentioned in the feed.  Therefore, state files with
old modification times can safely be deleted.  Something like:

[source, sh]
----
# This assumes that podrecast has in fact been run recently.
#
find /MY/ROOT/DIRECTORY -type f -name '.*.podrecast_done' -mtime +20 -delete
----

However, there are usually not so many state files, and they take up next
to no space, so I just let them be.
****

.CGI.
****
`podrecast` decides that it is running as a CGI script if _all_ of the following
four environment variables are set: `REQUEST_METHOD`, `HTTP_HOST`,
`SCRIPT_NAME` and `PATH_INFO`.  Otherwise, it considers itself to be
running normally.

In general, there is no reason why multiple root directories cannot be
defined.  However, when running as a CGI script, `podrecast` requires that
the configuration file defines _exactly one_ such root.
****

.Cron.
****
`podrecast` is quite chatty on standard output.
This can be helpful when run interactively,
but not when run (incorrectly) as a cron job.

You can always redirect standard output to `/dev/null`.  But, really, the
best approach is to use `chronic`.  That way, when an error occurs, you get
to see _all_ of the output.

`podrecast` disables the `wget` progress bar when standard output
is not attached to a terminal.
****

.Security.
****
Hmm.  +
I run `podrecast` on a private network, and -- although I know of no
vulnerabilities -- I wouldn't
particularly recommend running it on a public server.

However, `podrecast` does do the following checks on incoming CGI requests:

- The final path for a directory or file _must be inside the root
  directory_. +
  This may be an issue if you use symbolic links.
- The path _may not_ contain the sequence " `..` ". +
  (Why on earth should it?)
- The path _may not_ be more than one thousand characters long. +
  (That's a lot of characters.  Anything longer may be someone
  probing for vulnerabilities.)
****

// vim: set syntax=asciidoc:
