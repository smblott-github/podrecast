#!/usr/bin/env python

import os, sys, urllib2
from urlparse import urlparse, urlunparse
from tempfile import mkstemp

cgi = "PATH_INFO" in os.environ

def log(*args):
   if cgi:
      print "X-REPODGET-LOG:", " ".join(args)
   else:
      print " ".join(args)

def elog(*args):
   if cgi:
      print "X-REPODGET-ERROR:", " ".join(args)
   else:
      sys.stderr.write(" ".join(args) + "\n")

try:
   from requests import get
except:
   elog("import error: python-requests not found")
   sys.exit(1)

try:
   from lxml import objectify, etree
except:
   elog("import error: python-lxml not found")
   sys.exit(1)

catchup = True
catchup = False

def fetch_url(url):
   log("get:", url)
   response = get(url)
   if response.status_code != 200:
      raise Exception("failed to download: " + url)
   return response.content

def parse(text,url):
   try:
      return objectify.fromstring(text)
   except (KeyboardInterrupt, SystemExit):
      raise
   except Exception as error:
      raise Exception("failed to parse rss: " + url)

def fetch_feed(url):
   text = fetch_url(url)
   return parse(text,url)

def chdir(directory):
   try:
      exists = os.path.isdir(directory)
      if not exists:
         log("creating:", directory)
         os.makedirs(directory)
      log("chdir:", directory)
      os.chdir(directory)
      return not exists
   except (KeyboardInterrupt, SystemExit):
      raise
   except OSError as error: 
      if error.errno == os.errno.EEXIST and os.path.isdir(directory):
         pass

def touch(fname, times=None):
   log("touch:", fname)
   with file(fname, 'a'):
      os.utime(fname, times)

def done_file(fname):
   return "." + fname + ".done"

def download_file(fname):
   return fname + ".repodcast_download"

def feed_file():
   return ".repodcast_feed.xml"

## def http_download_stream(url,fname):
##    log("download stream:", url)
##    tmp = None
##    try:
##       fd, tmp = mkstemp(dir=".", prefix=fname, suffix=".repodget.tmp")
##       request = get(url, stream=True)
##       for data in request.iter_content(chunk_size=4096): 
##          if data:
##             os.write(fd,data)
##       request.close()
##       os.close(fd)
##       return tmp
##    except:
##       if tmp and os.path.exists(tmp):
##          os.unlink(tmp)
##       return None
## 
## def http_download_memory(url,fname):
##    log("download to memory:", url)
##    tmp = None
##    try:
##       fd, tmp = mkstemp(dir=".", prefix=fname, suffix=".repodget.tmp")
##       request = get(url)
##       os.write(fd,request.content)
##       os.close(fd)
##       return tmp
##    except:
##       if tmp and os.path.exists(tmp):
##          os.unlink(tmp)
##       raise

def http_download_urllib(url,fname):
   log("urllib2:", url)
   tmp = None
   try:
      fd, tmp = mkstemp(dir=".", prefix=fname, suffix=".repodget.tmp")
      request = urllib2.urlopen(url)
      while True:
         chunk = request.read(4096)
         if not chunk:
            break
         os.write(fd,chunk)
      #
      os.close(fd)
      return tmp
   except:
      if tmp and os.path.exists(tmp):
         os.unlink(tmp)
      raise

def http_download(url,fname):
   tmp = None
   try:
      log("download:", url)
      tmp = http_download_urllib(url,fname)
      #
      # Would be better to respect umask, here...
      os.chmod(tmp,0644)
      os.rename(tmp,fname)
      log("done:", fname)
   except:
      if tmp and os.path.exists(tmp):
         os.unlink(tmp)
      raise

def handle_enclosure(catchup,enclosure):
   attributes = enclosure.attrib
   if not "url" in attributes:
      elog("enclosure without url!")
      return
   #
   url = urlparse(attributes["url"])
   fname = os.path.basename(url.path)
   #
   if os.path.exists(fname):
      log("ready:", fname)
      return
   #
   if os.path.exists(download_file(fname)):
      log("downloaded:", fname)
      return
   #
   if os.path.exists(done_file(fname)):
      log("done:", fname)
      return
   #
   if catchup:
      touch(done_file(fname))
      return
   #
   # OK.  Download the file.
   http_download(urlunparse(url),download_file(fname))
   touch(done_file(fname))

def download_feed(catchup,directory,url):
   cwd = os.getcwd()
   enclosures = None
   try:
      catchup = chdir(directory) or catchup
      feed = fetch_feed(url)
      enclosures = feed.findall('.//channel/item/enclosure')
   except (KeyboardInterrupt, SystemExit):
      raise
   except Exception:
      chdir(cwd)
      raise
   #
   for enclosure in enclosures:
      handle_enclosure(catchup,enclosure)
   #
   with open(feed_file(), 'w') as fd:
      fd.write(etree.tostring(feed))
   #
   chdir(cwd)

def read_config(config):
   lines = None
   #
   log("config:", config)
   try:
      with open(config) as fd:
         lines = fd.readlines()
   except:
      elog("error: failed to read", config)
      sys.exit(1)
   #
   lines = [ line.strip() for line in lines ]
   lines = [ line for line in lines if len(line) ]
   lines = [ line for line in lines if not line.startswith("#") ]
   lines = [ line.split() for line in lines ]
   return lines

def handle_config(config):
   lines = read_config(config)
   #
   try:
      for line in lines:
         if len(line) != 2:
            raise Exception("config: invalid feed line: " + str(line))
         #
         if line[0] == "root":
            root = line[1]
            if not os.path.isabs(root):
               raise Exception("config: root must be an absolute path: " + str(line))
            chdir(root)
         else:
            directory, url = line
            download_feed(catchup,directory,url)
   #
   except Exception as error:
      elog("error:", str(error))
      sys.exit(1)

def choose_config():
   configs = [ "./repodcast.conf", "~/.repodcast.conf", "/etc/repodcast.conf" ]
   for config in configs:
      config = os.path.expanduser(config)
      if os.path.isfile(config) and os.access(config, os.R_OK):
         return config
   raise Exception("could not find config file: " + str(configs))

def main():
   choose_config()
   handle_config(choose_config())
   sys.exit(0)

def handle_cgi():
   lines = read_config(choose_config())
   lines = [ line for line in lines if line[0] == "root" ]
   #
   if len(lines) != 1 or len(lines[0]) != 2:
      elog("error: cannot serve CGI without a single root")
      sys.exit(1)
   #
   # TODO:
   # path is not secure!
   root = lines[0][1]
   path = root + os.environ['PATH_INFO']
   if os.path.isdir(path):
      return handle_cgi_directory(path)
   if os.path.isfile(path) and os.access(path, os.R_OK):
      return handle_cgi_file(path)
   #
   elog("error: does not exist:", path)
   sys.exit(1)
   #

def handle_cgi_directory(path):
   chdir(path)
   #
   if not os.path.isfile(feed_file()):
      elog("error: feed file does not exist:", path + "/" + feed_file())
      sys.exit(1)
   #
   if not os.path.isfile(feed_file()) or not os.access(feed_file(), os.R_OK):
      elog("error: cannot read feed file:", path + "/" + feed_file())
      sys.exit(1)
   #
   text = None
   with open(feed_file()) as fd:
      text = fd.read()
   feed = parse(text,"file://" + path + "/" + feed_file())
   #
   enclosures = feed.findall('.//channel/item/enclosure')
   for enclosure in enclosures:
      attributes = enclosure.attrib
      url = urlparse(attributes["url"])
      fname = os.path.basename(url.path)
      if not os.path.isfile(fname) or not os.access(fname, os.R_OK):
         item = enclosure.getparent()
         channel = item.getparent()
         channel.remove(item)
      else:
         # Content is available...
         #
         host = os.environ['HTTP_HOST']
         scriptname = os.environ['SCRIPT_NAME']
         pathinfo = os.environ['PATH_INFO']
         attributes["url"] = "http://" + host + scriptname + pathinfo + "/" + fname
   #
   print "Content-Type: text/xml"
   print
   print etree.tostring(feed)
   sys.exit(0)

def fd_copy(src,dst):
   while True:
      chunk = os.read(src,4096)
      if not chunk:
         break
      os.write(dst,chunk)

def handle_cgi_file(path):
   print "Content-Type: audio/mpeg"
   print
   # Flush standard output.  We are about to start using its file
   # descriptor directly.
   #
   sys.stdout.flush()
   #
   fd = os.open(path, os.O_RDONLY)
   fd_copy(fd,sys.stdout.fileno())
   sys.exit(0)

if __name__ == "__main__":
   if cgi:
      handle_cgi()
   else:
      main()

